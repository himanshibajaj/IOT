// Import necessary libraries
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <Hash.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>

// WiFi credentials
const char* ssid = "Mahek";
const char* password = "12345678";

// DHT Sensor settings
#define DHTPIN 4     // DHT11 sensor connected to GPIO 4 (D2 pin on NodeMCU)
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// Variables to store temperature and humidity
float t = 0.0;
float h = 0.0;

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// Timing variables
unsigned long previousMillis = 0;
const long interval = 10000; // Interval to read sensor (10 seconds)

// HTML Web Page stored in program memory
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <title>ESP8266 Weather Monitor</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="data:,">
  <style>
    body { text-align: center; font-family: "Trebuchet MS", Arial; }
    h1 { font-size: 2.5rem; color: #0F52BA; }
    p { font-size: 1.5rem; }
    .sensor { margin: 20px; font-size: 2rem; }
  </style>
</head>
<body>
  <h1>ESP8266 Weather Station</h1>
  <div class="sensor">
    üå°Ô∏è Temperature: <span id="temperature">%TEMPERATURE%</span> ¬∞C
  </div>
  <div class="sensor">
    üíß Humidity: <span id="humidity">%HUMIDITY%</span> %
  </div>

<script>
setInterval(function() {
  fetch('/temperature')
    .then(response => response.text())
    .then(data => {
      document.getElementById('temperature').innerHTML = data;
    });
  
  fetch('/humidity')
    .then(response => response.text())
    .then(data => {
      document.getElementById('humidity').innerHTML = data;
    });
}, 10000); // Refresh every 10 seconds
</script>

</body>
</html>
)rawliteral";

// Replaces placeholder with sensor values
String processor(const String& var){
  if(var == "TEMPERATURE"){
    return String(t);
  }
  else if(var == "HUMIDITY"){
    return String(h);
  }
  return String();
}

void setup(){
  // Start Serial Monitor
  Serial.begin(9600);
  
  // Start DHT sensor
  dht.begin();
  
  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi..");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println();
  Serial.println("WiFi connected.");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Route for root / webpage
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });

  // Route to get temperature data
  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", String(t).c_str());
  });

  // Route to get humidity data
  server.on("/humidity", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", String(h).c_str());
  });

  // Start server
  server.begin();
}

void loop(){
  unsigned long currentMillis = millis();
  
  // Read sensor data every interval
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    
    // Reading temperature
    float newT = dht.readTemperature();
    if (isnan(newT)) {
      Serial.println("Failed to read from DHT sensor!");
    } else {
      t = newT;
      Serial.print("Temperature: ");
      Serial.println(t);
    }

    // Reading humidity
    float newH = dht.readHumidity();
    if (isnan(newH)) {
      Serial.println("Failed to read from DHT sensor!");
    } else {
      h = newH;
      Serial.print("Humidity: ");
      Serial.println(h);

      // Printing Roll Numbers (as per your requirement)
      Serial.println("04");
    }
  }
}
